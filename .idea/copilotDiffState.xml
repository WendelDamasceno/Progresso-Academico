<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.tsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useMemo } from 'react';&#10;import { MATRIZ_CURRICULAR, CALENDARIO_ACADEMICO, CH_PREVISTA, Disciplina } from './data/curso';&#10;import { cn } from './lib/utils';&#10;import { Calendar, BookOpen, TrendingUp, CheckCircle, Clock, AlertCircle, RefreshCw, GraduationCap } from 'lucide-react';&#10;import './App.css';&#10;&#10;// --- FUNÇÃO DE CÁLCULO FINAL E COMPLETA ---&#10;function calcularResultados(concluidasIds: Set&lt;number&gt;, dataIngresso: string) {&#10;  console.log(' Recalculando resultados...', { dataIngresso, totalConcluidas: concluidasIds.size });&#10;&#10;  // 1. Cálculos de Progresso por Categoria&#10;  const disciplinasConcluidas = MATRIZ_CURRICULAR.filter(d =&gt; concluidasIds.has(d.id));&#10;  const chCumprida: Record&lt;Disciplina['categoria'], number&gt; = {&#10;    'Obrigatória': 0, 'Optativa': 0, 'Prática Profissional': 0, 'TCC': 0,&#10;  };&#10;  disciplinasConcluidas.forEach(d =&gt; { chCumprida[d.categoria] += d.carga_horaria; });&#10;  const chTotalCumprida = Object.values(chCumprida).reduce((acc, val) =&gt; acc + val, 0);&#10;  const chTotalPrevista = CH_PREVISTA.OBRIGATORIAS + CH_PREVISTA.OPTATIVAS + CH_PREVISTA.PRATICA_PROFISSIONAL + CH_PREVISTA.TCC;&#10;  const percentualGeral = chTotalPrevista &gt; 0 ? (chTotalCumprida / chTotalPrevista * 100) : 0;&#10;&#10;  // 2. Projeção de Formatura (LÓGICA CORRIGIDA)&#10;  const disciplinasPendentes = MATRIZ_CURRICULAR.filter(d =&gt; !concluidasIds.has(d.id));&#10;  const disciplinasObrigatoriasPendentes = disciplinasPendentes.filter(d =&gt; d.categoria === 'Obrigatória');&#10;&#10;  console.log(' Análise das disciplinas:', {&#10;    totalPendentes: disciplinasPendentes.length,&#10;    obrigatoriasPendentes: disciplinasObrigatoriasPendentes.length&#10;  });&#10;&#10;  let projecao = { semestre: &quot;N/A&quot;, data: &quot;Informe a data de ingresso&quot; };&#10;&#10;  // Se não há disciplinas pendentes, curso está concluído&#10;  if (disciplinasPendentes.length === 0) {&#10;    projecao = { semestre: &quot;Concluído!&quot;, data: &quot;Parabéns! Curso finalizado!&quot; };&#10;    console.log(' Curso concluído!');&#10;    return {&#10;      progressoPorCategoria: {&#10;        'Disciplinas Obrigatórias': {&#10;          prevista: CH_PREVISTA.OBRIGATORIAS,&#10;          cumprida: chCumprida['Obrigatória'],&#10;          pendente: CH_PREVISTA.OBRIGATORIAS - chCumprida['Obrigatória'],&#10;        },&#10;        'Disciplinas Optativas': {&#10;          prevista: CH_PREVISTA.OPTATIVAS,&#10;          cumprida: chCumprida['Optativa'],&#10;          pendente: CH_PREVISTA.OPTATIVAS - chCumprida['Optativa'],&#10;        },&#10;        'Prática Profissional': {&#10;          prevista: CH_PREVISTA.PRATICA_PROFISSIONAL,&#10;          cumprida: chCumprida['Prática Profissional'],&#10;          pendente: CH_PREVISTA.PRATICA_PROFISSIONAL - chCumprida['Prática Profissional'],&#10;        },&#10;        'Disciplinas de TCC': {&#10;          prevista: CH_PREVISTA.TCC,&#10;          cumprida: chCumprida['TCC'],&#10;          pendente: CH_PREVISTA.TCC - chCumprida['TCC'],&#10;        },&#10;        'Atividades Complementares': {&#10;          prevista: CH_PREVISTA.ATIVIDADES_COMPLEMENTARES,&#10;          cumprida: 0,&#10;          pendente: CH_PREVISTA.ATIVIDADES_COMPLEMENTARES - 0,&#10;        },&#10;      },&#10;      percentualGeral,&#10;      disciplinasPendentes,&#10;      projecao&#10;    };&#10;  }&#10;&#10;  // Validar e processar data de ingresso&#10;  if (!dataIngresso || dataIngresso.length &lt; 7) {&#10;    console.log('⚠️ Data de ingresso inválida:', dataIngresso);&#10;    projecao = { semestre: &quot;N/A&quot;, data: &quot;Data de ingresso inválida&quot; };&#10;  } else {&#10;    try {&#10;      // Processar data no formato YYYY-MM&#10;      const [anoStr, mesStr] = dataIngresso.split('-');&#10;      const anoIngresso = parseInt(anoStr);&#10;      const mesIngresso = parseInt(mesStr);&#10;&#10;      console.log(' Data processada:', { ano: anoIngresso, mes: mesIngresso });&#10;&#10;      if (isNaN(anoIngresso) || isNaN(mesIngresso) || mesIngresso &lt; 1 || mesIngresso &gt; 12) {&#10;        throw new Error('Data inválida');&#10;      }&#10;&#10;      // Determinar semestre de ingresso baseado no mês&#10;      let semestreIngressoSufixo: number;&#10;      let anoIngressoAjustado: number;&#10;&#10;      if (mesIngresso &gt;= 3 &amp;&amp; mesIngresso &lt;= 9) {&#10;        // Março a Setembro = semestre .1&#10;        semestreIngressoSufixo = 1;&#10;        anoIngressoAjustado = anoIngresso;&#10;      } else {&#10;        // Outubro a Fevereiro = semestre .2&#10;        semestreIngressoSufixo = 2;&#10;        // Janeiro/Fevereiro pertencem ao ano letivo anterior&#10;        anoIngressoAjustado = (mesIngresso &lt;= 2) ? anoIngresso - 1 : anoIngresso;&#10;      }&#10;&#10;      const semestreIngresso = `${anoIngressoAjustado}.${semestreIngressoSufixo}`;&#10;      console.log(' Semestre de ingresso:', semestreIngresso);&#10;&#10;      // Calcular quantos semestres são necessários&#10;      const DISCIPLINAS_POR_SEMESTRE_MEDIA = 6;&#10;      const semestresNecessarios = Math.ceil(disciplinasObrigatoriasPendentes.length / DISCIPLINAS_POR_SEMESTRE_MEDIA);&#10;&#10;      console.log('⏱️ Semestres necessários:', semestresNecessarios);&#10;&#10;      // Encontrar posição do semestre de ingresso no calendário&#10;      let posicaoIngresso = CALENDARIO_ACADEMICO.findIndex(sem =&gt; sem.semestre === semestreIngresso);&#10;&#10;      if (posicaoIngresso === -1) {&#10;        // Se não encontrar no calendário, calcular posição baseada no primeiro semestre&#10;        const primeiroSemestre = CALENDARIO_ACADEMICO[0]; // 2023.2&#10;        const [anoBase, semestreBase] = primeiroSemestre.semestre.split('.').map(n =&gt; parseInt(n));&#10;&#10;        const diferencaAnos = anoIngressoAjustado - anoBase;&#10;        posicaoIngresso = (diferencaAnos * 2) + (semestreIngressoSufixo - semestreBase);&#10;        posicaoIngresso = Math.max(0, posicaoIngresso);&#10;&#10;        console.log(' Posição calculada:', posicaoIngresso);&#10;      } else {&#10;        console.log(' Posição encontrada no calendário:', posicaoIngresso);&#10;      }&#10;&#10;      // Calcular semestre de formatura&#10;      const posicaoFormatura = posicaoIngresso + semestresNecessarios - 1;&#10;      console.log(' Posição de formatura:', posicaoFormatura);&#10;&#10;      if (posicaoFormatura &lt; CALENDARIO_ACADEMICO.length) {&#10;        // Formatura dentro do calendário disponível&#10;        const semestreFinal = CALENDARIO_ACADEMICO[posicaoFormatura];&#10;        const dataFim = new Date(semestreFinal.fim + 'T00:00:00');&#10;&#10;        projecao = {&#10;          semestre: semestreFinal.semestre,&#10;          data: dataFim.toLocaleDateString('pt-BR', {&#10;            day: '2-digit',&#10;            month: 'long',&#10;            year: 'numeric'&#10;          })&#10;        };&#10;        console.log('✅ Projeção calculada:', projecao);&#10;      } else {&#10;        // Extrapolar além do calendário&#10;        const ultimoSemestre = CALENDARIO_ACADEMICO[CALENDARIO_ACADEMICO.length - 1];&#10;        const semestresAdicionales = posicaoFormatura - (CALENDARIO_ACADEMICO.length - 1);&#10;&#10;        const dataUltimoSemestre = new Date(ultimoSemestre.fim + 'T00:00:00');&#10;        dataUltimoSemestre.setMonth(dataUltimoSemestre.getMonth() + (6 * semestresAdicionales));&#10;&#10;        const anoFinal = dataUltimoSemestre.getFullYear();&#10;        const semestreFinal = (dataUltimoSemestre.getMonth() &lt; 6) ? 1 : 2;&#10;&#10;        projecao = {&#10;          semestre: `${anoFinal}.${semestreFinal} (Estimado)`,&#10;          data: dataUltimoSemestre.toLocaleDateString('pt-BR', {&#10;            day: '2-digit',&#10;            month: 'long',&#10;            year: 'numeric'&#10;          }) + ' (Estimativa)'&#10;        };&#10;        console.log(' Projeção extrapolada:', projecao);&#10;      }&#10;&#10;    } catch (error) {&#10;      console.error('❌ Erro no cálculo:', error);&#10;      projecao = { semestre: &quot;Erro&quot;, data: &quot;Erro no cálculo da projeção&quot; };&#10;    }&#10;  }&#10;&#10;  console.log(' Resultado final:', projecao);&#10;&#10;  return {&#10;    progressoPorCategoria: {&#10;      'Disciplinas Obrigatórias': {&#10;        prevista: CH_PREVISTA.OBRIGATORIAS,&#10;        cumprida: chCumprida['Obrigatória'],&#10;        pendente: CH_PREVISTA.OBRIGATORIAS - chCumprida['Obrigatória'],&#10;      },&#10;      'Disciplinas Optativas': {&#10;        prevista: CH_PREVISTA.OPTATIVAS,&#10;        cumprida: chCumprida['Optativa'],&#10;        pendente: CH_PREVISTA.OPTATIVAS - chCumprida['Optativa'],&#10;      },&#10;      'Prática Profissional': {&#10;        prevista: CH_PREVISTA.PRATICA_PROFISSIONAL,&#10;        cumprida: chCumprida['Prática Profissional'],&#10;        pendente: CH_PREVISTA.PRATICA_PROFISSIONAL - chCumprida['Prática Profissional'],&#10;      },&#10;      'Disciplinas de TCC': {&#10;        prevista: CH_PREVISTA.TCC,&#10;        cumprida: chCumprida['TCC'],&#10;        pendente: CH_PREVISTA.TCC - chCumprida['TCC'],&#10;      },&#10;      'Atividades Complementares': {&#10;        prevista: CH_PREVISTA.ATIVIDADES_COMPLEMENTARES,&#10;        cumprida: 0,&#10;        pendente: CH_PREVISTA.ATIVIDADES_COMPLEMENTARES - 0,&#10;      },&#10;    },&#10;    percentualGeral,&#10;    disciplinasPendentes,&#10;    projecao&#10;  };&#10;}&#10;&#10;// Componentes UI modernos&#10;const Card = ({ children, className, ...props }: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div className={cn(&quot;card-gradient rounded-lg shadow-sm&quot;, className)} {...props}&gt;&#10;    {children}&#10;  &lt;/div&gt;&#10;);&#10;&#10;const CardHeader = ({ children, className, ...props }: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div className={cn(&quot;flex flex-col space-y-1.5 p-6&quot;, className)} {...props}&gt;&#10;    {children}&#10;  &lt;/div&gt;&#10;);&#10;&#10;const CardTitle = ({ children, className, ...props }: React.HTMLAttributes&lt;HTMLHeadingElement&gt;) =&gt; (&#10;  &lt;h3 className={cn(&quot;text-2xl font-semibold leading-none tracking-tight text-card-foreground&quot;, className)} {...props}&gt;&#10;    {children}&#10;  &lt;/h3&gt;&#10;);&#10;&#10;const CardContent = ({ children, className, ...props }: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div className={cn(&quot;p-6 pt-0&quot;, className)} {...props}&gt;&#10;    {children}&#10;  &lt;/div&gt;&#10;);&#10;&#10;const Progress = ({ value, className, ...props }: { value: number; className?: string }) =&gt; (&#10;  &lt;div className={cn(&quot;progress-bar-modern relative overflow-hidden&quot;, className)} {...props}&gt;&#10;    &lt;div&#10;      className=&quot;progress-bar-fill relative shimmer-effect&quot;&#10;      style={{ width: `${value}%` }}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;);&#10;&#10;const Badge = ({ children, variant = &quot;default&quot;, className }: { children: React.ReactNode; variant?: &quot;default&quot; | &quot;secondary&quot; | &quot;outline&quot;; className?: string }) =&gt; {&#10;  const variants = {&#10;    default: &quot;status-badge-complete&quot;,&#10;    secondary: &quot;status-badge-progress&quot;,&#10;    outline: &quot;status-badge-pending&quot;&#10;  };&#10;&#10;  return (&#10;    &lt;span className={cn(&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium&quot;, variants[variant], className)}&gt;&#10;      {children}&#10;    &lt;/span&gt;&#10;  );&#10;};&#10;&#10;const Button = ({ children, variant = &quot;default&quot;, className, ...props }: React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt; &amp; { variant?: &quot;default&quot; | &quot;outline&quot; }) =&gt; {&#10;  const variants = {&#10;    default: &quot;bg-primary text-primary-foreground hover:bg-primary/90&quot;,&#10;    outline: &quot;border border-border bg-background hover:bg-muted text-foreground&quot;&#10;  };&#10;&#10;  return (&#10;    &lt;button&#10;      className={cn(&quot;inline-flex items-center justify-center px-4 py-2 rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50&quot;, variants[variant], className)}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/button&gt;&#10;  );&#10;};&#10;&#10;// --- COMPONENTE PRINCIPAL ---&#10;export default function App() {&#10;  const [selectedIds, setSelectedIds] = useState&lt;Set&lt;number&gt;&gt;(new Set());&#10;  const [ingresso, setIngresso] = useState&lt;string&gt;('2023-09');&#10;  const [isMounted, setIsMounted] = useState(false);&#10;&#10;  // Lógica de localStorage e handlers&#10;  useEffect(() =&gt; {&#10;    const savedIds = localStorage.getItem('disciplinasConcluidas');&#10;    const savedIngresso = localStorage.getItem('dataIngresso');&#10;    if (savedIds) setSelectedIds(new Set(JSON.parse(savedIds)));&#10;    if (savedIngresso) setIngresso(savedIngresso);&#10;    setIsMounted(true);&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isMounted) {&#10;      localStorage.setItem('disciplinasConcluidas', JSON.stringify(Array.from(selectedIds)));&#10;      localStorage.setItem('dataIngresso', ingresso);&#10;    }&#10;  }, [selectedIds, ingresso, isMounted]);&#10;&#10;  const handleToggleDisciplina = (id: number) =&gt; {&#10;    setSelectedIds(prev =&gt; {&#10;      const newIds = new Set(prev);&#10;      newIds.has(id) ? newIds.delete(id) : newIds.add(id);&#10;      return newIds;&#10;    });&#10;  };&#10;&#10;  // CORRIGIDO: Forçar recálculo sempre que ingresso ou selectedIds mudarem&#10;  const resultados = useMemo(() =&gt; {&#10;    if (!isMounted) return null;&#10;    // Garantir que sempre recalcula quando a data de ingresso muda&#10;    return calcularResultados(selectedIds, ingresso);&#10;  }, [selectedIds, ingresso, isMounted]);&#10;&#10;  const disciplinasPorSemestre = useMemo(() =&gt; {&#10;    return MATRIZ_CURRICULAR.reduce((acc, d) =&gt; {&#10;      (acc[d.semestre_ideal] = acc[d.semestre_ideal] || []).push(d);&#10;      return acc;&#10;    }, {} as Record&lt;number, Disciplina[]&gt;);&#10;  }, []);&#10;&#10;  const getStatusIcon = (disciplina: Disciplina) =&gt; {&#10;    const isConcluida = selectedIds.has(disciplina.id);&#10;    return isConcluida ? (&#10;      &lt;CheckCircle className=&quot;h-4 w-4 text-primary&quot; /&gt;&#10;    ) : (&#10;      &lt;AlertCircle className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;    );&#10;  };&#10;&#10;  const getCategoryClass = (categoria: Disciplina['categoria']) =&gt; {&#10;    switch (categoria) {&#10;      case 'Obrigatória': return 'category-obrigatoria';&#10;      case 'Optativa': return 'category-optativa';&#10;      case 'Prática Profissional': return 'category-pratica';&#10;      case 'TCC': return 'category-tcc';&#10;      default: return 'category-obrigatoria';&#10;    }&#10;  };&#10;&#10;  if (!isMounted) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-background flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;          &lt;GraduationCap className=&quot;h-12 w-12 text-primary mx-auto animate-spin&quot; /&gt;&#10;          &lt;p className=&quot;text-lg text-muted-foreground&quot;&gt;Carregando aplicação...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background p-6&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;mb-8 text-center animate-fade-in-up&quot;&gt;&#10;        &lt;h1 className=&quot;text-4xl font-bold text-foreground mb-2 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent&quot;&gt;&#10;          Progresso Acadêmico&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-muted-foreground&quot;&gt;Acompanhe seu desenvolvimento no curso de Ciência da Computação - IFBA&lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Grid com três seções */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        {/* Seção 1: Matriz Curricular */}&#10;        &lt;Card className=&quot;lg:col-span-1 floating-card animate-fade-in-up&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;&#10;              Seu Mês e Ano de Ingresso:&#10;              &lt;input&#10;                type=&quot;month&quot;&#10;                value={ingresso}&#10;                onChange={(e) =&gt; setIngresso(e.target.value)}&#10;                className=&quot;ml-2 px-2 py-1 border border-border rounded text-foreground bg-input text-sm focus:ring-2 focus:ring-primary focus:border-transparent&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;BookOpen className=&quot;h-5 w-5 text-primary&quot; /&gt;&#10;              Matriz Curricular&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-4 max-h-96 overflow-y-auto&quot;&gt;&#10;            {Object.entries(disciplinasPorSemestre).map(([semestre, disciplinas]) =&gt; (&#10;              &lt;div key={semestre} className=&quot;semester-card animate-delay-1&quot;&gt;&#10;                &lt;h4 className=&quot;font-semibold text-sm text-foreground mb-3 flex items-center gap-2&quot;&gt;&#10;                  &lt;span className=&quot;bg-primary text-primary-foreground w-6 h-6 rounded-full flex items-center justify-center text-xs&quot;&gt;&#10;                    {semestre}&#10;                  &lt;/span&gt;&#10;                  {semestre}º Semestre&#10;                &lt;/h4&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  {disciplinas.map(d =&gt; (&#10;                    &lt;div key={d.id} className=&quot;discipline-item&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        id={`d-${d.id}`}&#10;                        checked={selectedIds.has(d.id)}&#10;                        onChange={() =&gt; handleToggleDisciplina(d.id)}&#10;                        className=&quot;discipline-checkbox&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2 mb-1&quot;&gt;&#10;                          {getStatusIcon(d)}&#10;                          &lt;label htmlFor={`d-${d.id}`} className=&quot;font-medium text-sm text-card-foreground cursor-pointer truncate&quot;&gt;&#10;                            {d.codigo} - {d.nome}&#10;                          &lt;/label&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2 text-xs&quot;&gt;&#10;                          &lt;span className={cn(&quot;category-badge&quot;, getCategoryClass(d.categoria))}&gt;&#10;                            {d.categoria}&#10;                          &lt;/span&gt;&#10;                          &lt;span className=&quot;workload-info&quot;&gt;{d.carga_horaria}h&lt;/span&gt;&#10;                          {d.prerequisitos.length &gt; 0 &amp;&amp; (&#10;                            &lt;span className=&quot;text-muted-foreground truncate&quot;&gt;&#10;                              Pré-req: {d.prerequisitos.join(', ')}&#10;                            &lt;/span&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Seção 2: Projeção de Formatura */}&#10;        &lt;Card className=&quot;lg:col-span-1 floating-card animate-fade-in-up animate-delay-1&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Calendar className=&quot;h-5 w-5 text-primary&quot; /&gt;&#10;              Projeção de Formatura&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;            {resultados &amp;&amp; (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;projection-card text-center space-y-2&quot;&gt;&#10;                  &lt;div className=&quot;text-3xl font-bold text-primary&quot;&gt;{resultados.projecao.semestre}&lt;/div&gt;&#10;                  &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Semestre previsto para formatura&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;{resultados.projecao.data}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;span className=&quot;text-sm&quot;&gt;Disciplinas Concluídas&lt;/span&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                      {MATRIZ_CURRICULAR.length - resultados.disciplinasPendentes.length}/{MATRIZ_CURRICULAR.length}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;span className=&quot;text-sm&quot;&gt;Disciplinas Restantes&lt;/span&gt;&#10;                    &lt;span className=&quot;font-medium text-primary&quot;&gt;&#10;                      {resultados.disciplinasPendentes.length}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;span className=&quot;text-sm&quot;&gt;Data de Ingresso&lt;/span&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                      {new Date(ingresso + '-01').toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' })}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;bg-muted rounded-lg p-4&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium mb-2 text-sm text-foreground&quot;&gt;Próximas Disciplinas&lt;/h4&gt;&#10;                  &lt;ul className=&quot;space-y-1 text-sm text-muted-foreground&quot;&gt;&#10;                    {resultados.disciplinasPendentes.slice(0, 3).map(d =&gt; (&#10;                      &lt;li key={d.id} className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;Clock className=&quot;h-3 w-3&quot; /&gt;&#10;                        {d.nome}&#10;                      &lt;/li&gt;&#10;                    ))}&#10;                    {resultados.disciplinasPendentes.length &gt; 3 &amp;&amp; (&#10;                      &lt;li className=&quot;text-xs text-muted-foreground&quot;&gt;&#10;                        +{resultados.disciplinasPendentes.length - 3} disciplinas restantes&#10;                      &lt;/li&gt;&#10;                    )}&#10;                  &lt;/ul&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Seção 3: Percentual de Progresso */}&#10;        &lt;Card className=&quot;lg:col-span-1 floating-card animate-fade-in-up animate-delay-2&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;TrendingUp className=&quot;h-5 w-5 text-primary&quot; /&gt;&#10;              Percentual de Progresso&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;            {resultados &amp;&amp; (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;                  &lt;div className=&quot;progress-circle&quot;&gt;&#10;                    &lt;svg viewBox=&quot;0 0 100 100&quot;&gt;&#10;                      &lt;circle&#10;                        cx=&quot;50&quot;&#10;                        cy=&quot;50&quot;&#10;                        r=&quot;40&quot;&#10;                        strokeWidth=&quot;8&quot;&#10;                        fill=&quot;transparent&quot;&#10;                        className=&quot;bg-circle stroke-[8]&quot;&#10;                      /&gt;&#10;                      &lt;circle&#10;                        cx=&quot;50&quot;&#10;                        cy=&quot;50&quot;&#10;                        r=&quot;40&quot;&#10;                        strokeWidth=&quot;8&quot;&#10;                        fill=&quot;transparent&quot;&#10;                        strokeDasharray={`${resultados.percentualGeral * 2.51} 251`}&#10;                        className=&quot;progress-fill stroke-[8]&quot;&#10;                        strokeLinecap=&quot;round&quot;&#10;                      /&gt;&#10;                    &lt;/svg&gt;&#10;                    &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;                      &lt;div className=&quot;text-center&quot;&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-primary&quot;&gt;{resultados.percentualGeral.toFixed(1)}%&lt;/div&gt;&#10;                        &lt;div className=&quot;text-xs text-muted-foreground&quot;&gt;Completo&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;space-y-3&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                    &lt;span&gt;Progresso Geral&lt;/span&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;{resultados.percentualGeral.toFixed(1)}%&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;Progress value={resultados.percentualGeral} className=&quot;h-3&quot; /&gt;&#10;&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;h4 className=&quot;font-medium text-sm&quot;&gt;Requisitos de Conclusão&lt;/h4&gt;&#10;                    {Object.entries(resultados.progressoPorCategoria).map(([nome, dados]) =&gt; (&#10;                      &lt;div key={nome} className=&quot;space-y-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center text-xs&quot;&gt;&#10;                          &lt;span className=&quot;text-muted-foreground&quot;&gt;{nome}&lt;/span&gt;&#10;                          &lt;span className=&quot;font-medium&quot;&gt;{dados.cumprida}/{dados.prevista}h&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Progress value={(dados.cumprida / dados.prevista) * 100} className=&quot;h-1&quot; /&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center text-xs&quot;&gt;&#10;                          &lt;Badge variant={dados.pendente &lt;= 0 ? &quot;default&quot; : &quot;outline&quot;}&gt;&#10;                            {dados.pendente &lt;= 0 ? 'Cumprido' : `${dados.pendente}h restantes`}&#10;                          &lt;/Badge&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useMemo } from 'react';&#10;import { MATRIZ_CURRICULAR, CALENDARIO_ACADEMICO, CH_PREVISTA, Disciplina } from './data/curso';&#10;import { cn } from './lib/utils';&#10;import { Calendar, BookOpen, TrendingUp, CheckCircle, Clock, AlertCircle, RefreshCw, GraduationCap } from 'lucide-react';&#10;import './App.css';&#10;&#10;// --- FUNÇÃO DE CÁLCULO FINAL E COMPLETA ---&#10;function calcularResultados(concluidasIds: Set&lt;number&gt;, dataIngresso: string) {&#10;  console.log(' Recalculando resultados...', { dataIngresso, totalConcluidas: concluidasIds.size });&#10;&#10;  // 1. Cálculos de Progresso por Categoria&#10;  const disciplinasConcluidas = MATRIZ_CURRICULAR.filter(d =&gt; concluidasIds.has(d.id));&#10;  const chCumprida: Record&lt;Disciplina['categoria'], number&gt; = {&#10;    'Obrigatória': 0, 'Optativa': 0, 'Prática Profissional': 0, 'TCC': 0,&#10;  };&#10;  disciplinasConcluidas.forEach(d =&gt; { chCumprida[d.categoria] += d.carga_horaria; });&#10;  const chTotalCumprida = Object.values(chCumprida).reduce((acc, val) =&gt; acc + val, 0);&#10;  const chTotalPrevista = CH_PREVISTA.OBRIGATORIAS + CH_PREVISTA.OPTATIVAS + CH_PREVISTA.PRATICA_PROFISSIONAL + CH_PREVISTA.TCC;&#10;  const percentualGeral = chTotalPrevista &gt; 0 ? (chTotalCumprida / chTotalPrevista * 100) : 0;&#10;&#10;  // 2. Cálculo do Ritmo e Performance do Estudante&#10;  const disciplinasPendentes = MATRIZ_CURRICULAR.filter(d =&gt; !concluidasIds.has(d.id));&#10;  const disciplinasObrigatoriasPendentes = disciplinasPendentes.filter(d =&gt; d.categoria === 'Obrigatória');&#10;&#10;  // Calcular semestres decorridos desde o ingresso&#10;  let semestresDecorridos = 0;&#10;  let ritmoAtual = 0;&#10;  let desempenho = &quot;Em início&quot;;&#10;&#10;  if (dataIngresso &amp;&amp; dataIngresso.length &gt;= 7) {&#10;    try {&#10;      const [anoStr, mesStr] = dataIngresso.split('-');&#10;      const anoIngresso = parseInt(anoStr);&#10;      const mesIngresso = parseInt(mesStr);&#10;      &#10;      if (!isNaN(anoIngresso) &amp;&amp; !isNaN(mesIngresso)) {&#10;        const hoje = new Date();&#10;        const anoAtual = hoje.getFullYear();&#10;        const mesAtual = hoje.getMonth() + 1;&#10;        &#10;        // Calcular diferença em semestres desde o ingresso&#10;        let semestresTotais = 0;&#10;        &#10;        // Determinar semestre de ingresso&#10;        const semestreIngressoTipo = (mesIngresso &gt;= 3 &amp;&amp; mesIngresso &lt;= 9) ? 1 : 2;&#10;        const anoIngressoAjustado = (mesIngresso &lt;= 2) ? anoIngresso - 1 : anoIngresso;&#10;        &#10;        // Determinar semestre atual&#10;        const semestreAtualTipo = (mesAtual &gt;= 3 &amp;&amp; mesAtual &lt;= 9) ? 1 : 2;&#10;        const anoAtualAjustado = (mesAtual &lt;= 2) ? anoAtual - 1 : anoAtual;&#10;        &#10;        // Calcular diferença em semestres&#10;        const diferencaAnos = anoAtualAjustado - anoIngressoAjustado;&#10;        semestresTotais = (diferencaAnos * 2) + (semestreAtualTipo - semestreIngressoTipo);&#10;        &#10;        semestresDecorridos = Math.max(0, semestresTotais);&#10;        &#10;        // Calcular ritmo atual (disciplinas por semestre)&#10;        if (semestresDecorridos &gt; 0) {&#10;          ritmoAtual = disciplinasConcluidas.length / semestresDecorridos;&#10;        }&#10;        &#10;        // Avaliar desempenho&#10;        if (ritmoAtual &gt;= 6) {&#10;          desempenho = &quot;Excelente&quot;;&#10;        } else if (ritmoAtual &gt;= 4) {&#10;          desempenho = &quot;Bom&quot;;&#10;        } else if (ritmoAtual &gt;= 2) {&#10;          desempenho = &quot;Regular&quot;;&#10;        } else if (semestresDecorridos &gt; 0) {&#10;          desempenho = &quot;Atenção&quot;;&#10;        }&#10;      }&#10;    } catch (error) {&#10;      console.error('Erro ao calcular performance:', error);&#10;    }&#10;  }&#10;&#10;  console.log(' Performance calculada:', {&#10;    semestresDecorridos,&#10;    ritmoAtual: ritmoAtual.toFixed(1),&#10;    desempenho,&#10;    disciplinasConcluidas: disciplinasConcluidas.length&#10;  });&#10;&#10;  // 3. Projeção de Formatura Inteligente&#10;  let projecao = { &#10;    semestre: &quot;N/A&quot;, &#10;    data: &quot;Informe a data de ingresso&quot;,&#10;    semestresDecorridos,&#10;    ritmoAtual,&#10;    desempenho&#10;  };&#10;&#10;  // Se não há disciplinas pendentes, curso está concluído&#10;  if (disciplinasPendentes.length === 0) {&#10;    projecao = { &#10;      semestre: &quot;Concluído!&quot;, &#10;      data: &quot;Parabéns! Curso finalizado!&quot;,&#10;      semestresDecorridos,&#10;      ritmoAtual,&#10;      desempenho: &quot;Concluído&quot;&#10;    };&#10;    &#10;    return {&#10;      progressoPorCategoria: {&#10;        'Disciplinas Obrigatórias': {&#10;          prevista: CH_PREVISTA.OBRIGATORIAS,&#10;          cumprida: chCumprida['Obrigatória'],&#10;          pendente: CH_PREVISTA.OBRIGATORIAS - chCumprida['Obrigatória'],&#10;        },&#10;        'Disciplinas Optativas': {&#10;          prevista: CH_PREVISTA.OPTATIVAS,&#10;          cumprida: chCumprida['Optativa'],&#10;          pendente: CH_PREVISTA.OPTATIVAS - chCumprida['Optativa'],&#10;        },&#10;        'Prática Profissional': {&#10;          prevista: CH_PREVISTA.PRATICA_PROFISSIONAL,&#10;          cumprida: chCumprida['Prática Profissional'],&#10;          pendente: CH_PREVISTA.PRATICA_PROFISSIONAL - chCumprida['Prática Profissional'],&#10;        },&#10;        'Disciplinas de TCC': {&#10;          prevista: CH_PREVISTA.TCC,&#10;          cumprida: chCumprida['TCC'],&#10;          pendente: CH_PREVISTA.TCC - chCumprida['TCC'],&#10;        },&#10;        'Atividades Complementares': {&#10;          prevista: CH_PREVISTA.ATIVIDADES_COMPLEMENTARES,&#10;          cumprida: 0,&#10;          pendente: CH_PREVISTA.ATIVIDADES_COMPLEMENTARES - 0,&#10;        },&#10;      },&#10;      percentualGeral,&#10;      disciplinasPendentes,&#10;      projecao&#10;    };&#10;  }&#10;&#10;  // Validar e processar data de ingresso para projeção&#10;  if (!dataIngresso || dataIngresso.length &lt; 7) {&#10;    console.log('⚠️ Data de ingresso inválida:', dataIngresso);&#10;    projecao = { &#10;      semestre: &quot;N/A&quot;, &#10;      data: &quot;Data de ingresso inválida&quot;,&#10;      semestresDecorridos,&#10;      ritmoAtual,&#10;      desempenho&#10;    };&#10;  } else {&#10;    try {&#10;      // Processar data no formato YYYY-MM&#10;      const [anoStr, mesStr] = dataIngresso.split('-');&#10;      const anoIngresso = parseInt(anoStr);&#10;      const mesIngresso = parseInt(mesStr);&#10;&#10;      if (isNaN(anoIngresso) || isNaN(mesIngresso) || mesIngresso &lt; 1 || mesIngresso &gt; 12) {&#10;        throw new Error('Data inválida');&#10;      }&#10;&#10;      // Determinar semestre de ingresso baseado no mês&#10;      let semestreIngressoSufixo: number;&#10;      let anoIngressoAjustado: number;&#10;&#10;      if (mesIngresso &gt;= 3 &amp;&amp; mesIngresso &lt;= 9) {&#10;        semestreIngressoSufixo = 1;&#10;        anoIngressoAjustado = anoIngresso;&#10;      } else {&#10;        semestreIngressoSufixo = 2;&#10;        anoIngressoAjustado = (mesIngresso &lt;= 2) ? anoIngresso - 1 : anoIngresso;&#10;      }&#10;&#10;      const semestreIngresso = `${anoIngressoAjustado}.${semestreIngressoSufixo}`;&#10;&#10;      // Lógica inteligente de projeção baseada no ritmo real&#10;      let disciplinasPorSemestre: number;&#10;      &#10;      if (ritmoAtual &gt; 0 &amp;&amp; semestresDecorridos &gt;= 2) {&#10;        // Usar ritmo real do estudante&#10;        disciplinasPorSemestre = ritmoAtual;&#10;      } else {&#10;        // Usar média padrão do curso&#10;        disciplinasPorSemestre = 6;&#10;      }&#10;&#10;      // Considerar que o estudante pode estar repetindo disciplinas&#10;      // Se o ritmo é muito baixo, pode indicar repetências&#10;      if (ritmoAtual &gt; 0 &amp;&amp; ritmoAtual &lt; 3 &amp;&amp; semestresDecorridos &gt;= 3) {&#10;        // Ajustar a projeção para considerar dificuldades&#10;        disciplinasPorSemestre = Math.max(3, ritmoAtual * 1.2);&#10;      }&#10;&#10;      const semestresNecessarios = Math.ceil(disciplinasObrigatoriasPendentes.length / disciplinasPorSemestre);&#10;&#10;      // Encontrar posição do semestre de ingresso no calendário&#10;      let posicaoIngresso = CALENDARIO_ACADEMICO.findIndex(sem =&gt; sem.semestre === semestreIngresso);&#10;&#10;      if (posicaoIngresso === -1) {&#10;        const primeiroSemestre = CALENDARIO_ACADEMICO[0];&#10;        const [anoBase, semestreBase] = primeiroSemestre.semestre.split('.').map(n =&gt; parseInt(n));&#10;        const diferencaAnos = anoIngressoAjustado - anoBase;&#10;        posicaoIngresso = (diferencaAnos * 2) + (semestreIngressoSufixo - semestreBase);&#10;        posicaoIngresso = Math.max(0, posicaoIngresso);&#10;      }&#10;&#10;      // Calcular semestre de formatura considerando semestres já decorridos&#10;      const posicaoAtual = posicaoIngresso + semestresDecorridos;&#10;      const posicaoFormatura = posicaoAtual + semestresNecessarios - 1;&#10;&#10;      if (posicaoFormatura &lt; CALENDARIO_ACADEMICO.length) {&#10;        const semestreFinal = CALENDARIO_ACADEMICO[posicaoFormatura];&#10;        const dataFim = new Date(semestreFinal.fim + 'T00:00:00');&#10;&#10;        projecao = {&#10;          semestre: semestreFinal.semestre,&#10;          data: dataFim.toLocaleDateString('pt-BR', {&#10;            day: '2-digit',&#10;            month: 'long',&#10;            year: 'numeric'&#10;          }),&#10;          semestresDecorridos,&#10;          ritmoAtual,&#10;          desempenho&#10;        };&#10;      } else {&#10;        // Extrapolar além do calendário&#10;        const ultimoSemestre = CALENDARIO_ACADEMICO[CALENDARIO_ACADEMICO.length - 1];&#10;        const semestresAdicionales = posicaoFormatura - (CALENDARIO_ACADEMICO.length - 1);&#10;&#10;        const dataUltimoSemestre = new Date(ultimoSemestre.fim + 'T00:00:00');&#10;        dataUltimoSemestre.setMonth(dataUltimoSemestre.getMonth() + (6 * semestresAdicionales));&#10;&#10;        const anoFinal = dataUltimoSemestre.getFullYear();&#10;        const semestreFinal = (dataUltimoSemestre.getMonth() &lt; 6) ? 1 : 2;&#10;&#10;        projecao = {&#10;          semestre: `${anoFinal}.${semestreFinal} (Estimado)`,&#10;          data: dataUltimoSemestre.toLocaleDateString('pt-BR', {&#10;            day: '2-digit',&#10;            month: 'long',&#10;            year: 'numeric'&#10;          }) + ' (Estimativa)',&#10;          semestresDecorridos,&#10;          ritmoAtual,&#10;          desempenho&#10;        };&#10;      }&#10;&#10;    } catch (error) {&#10;      console.error('❌ Erro no cálculo:', error);&#10;      projecao = { &#10;        semestre: &quot;Erro&quot;, &#10;        data: &quot;Erro no cálculo da projeção&quot;,&#10;        semestresDecorridos,&#10;        ritmoAtual,&#10;        desempenho&#10;      };&#10;    }&#10;  }&#10;&#10;  return {&#10;    progressoPorCategoria: {&#10;      'Disciplinas Obrigatórias': {&#10;        prevista: CH_PREVISTA.OBRIGATORIAS,&#10;        cumprida: chCumprida['Obrigatória'],&#10;        pendente: CH_PREVISTA.OBRIGATORIAS - chCumprida['Obrigatória'],&#10;      },&#10;      'Disciplinas Optativas': {&#10;        prevista: CH_PREVISTA.OPTATIVAS,&#10;        cumprida: chCumprida['Optativa'],&#10;        pendente: CH_PREVISTA.OPTATIVAS - chCumprida['Optativa'],&#10;      },&#10;      'Prática Profissional': {&#10;        prevista: CH_PREVISTA.PRATICA_PROFISSIONAL,&#10;        cumprida: chCumprida['Prática Profissional'],&#10;        pendente: CH_PREVISTA.PRATICA_PROFISSIONAL - chCumprida['Prática Profissional'],&#10;      },&#10;      'Disciplinas de TCC': {&#10;        prevista: CH_PREVISTA.TCC,&#10;        cumprida: chCumprida['TCC'],&#10;        pendente: CH_PREVISTA.TCC - chCumprida['TCC'],&#10;      },&#10;      'Atividades Complementares': {&#10;        prevista: CH_PREVISTA.ATIVIDADES_COMPLEMENTARES,&#10;        cumprida: 0,&#10;        pendente: CH_PREVISTA.ATIVIDADES_COMPLEMENTARES - 0,&#10;      },&#10;    },&#10;    percentualGeral,&#10;    disciplinasPendentes,&#10;    projecao&#10;  };&#10;}&#10;&#10;// Componentes UI modernos&#10;const Card = ({ children, className, ...props }: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div className={cn(&quot;card-gradient rounded-lg shadow-sm&quot;, className)} {...props}&gt;&#10;    {children}&#10;  &lt;/div&gt;&#10;);&#10;&#10;const CardHeader = ({ children, className, ...props }: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div className={cn(&quot;flex flex-col space-y-1.5 p-6&quot;, className)} {...props}&gt;&#10;    {children}&#10;  &lt;/div&gt;&#10;);&#10;&#10;const CardTitle = ({ children, className, ...props }: React.HTMLAttributes&lt;HTMLHeadingElement&gt;) =&gt; (&#10;  &lt;h3 className={cn(&quot;text-2xl font-semibold leading-none tracking-tight text-card-foreground&quot;, className)} {...props}&gt;&#10;    {children}&#10;  &lt;/h3&gt;&#10;);&#10;&#10;const CardContent = ({ children, className, ...props }: React.HTMLAttributes&lt;HTMLDivElement&gt;) =&gt; (&#10;  &lt;div className={cn(&quot;p-6 pt-0&quot;, className)} {...props}&gt;&#10;    {children}&#10;  &lt;/div&gt;&#10;);&#10;&#10;const Progress = ({ value, className, ...props }: { value: number; className?: string }) =&gt; (&#10;  &lt;div className={cn(&quot;progress-bar-modern relative overflow-hidden&quot;, className)} {...props}&gt;&#10;    &lt;div&#10;      className=&quot;progress-bar-fill relative shimmer-effect&quot;&#10;      style={{ width: `${value}%` }}&#10;    /&gt;&#10;  &lt;/div&gt;&#10;);&#10;&#10;const Badge = ({ children, variant = &quot;default&quot;, className }: { children: React.ReactNode; variant?: &quot;default&quot; | &quot;secondary&quot; | &quot;outline&quot;; className?: string }) =&gt; {&#10;  const variants = {&#10;    default: &quot;status-badge-complete&quot;,&#10;    secondary: &quot;status-badge-progress&quot;,&#10;    outline: &quot;status-badge-pending&quot;&#10;  };&#10;&#10;  return (&#10;    &lt;span className={cn(&quot;inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium&quot;, variants[variant], className)}&gt;&#10;      {children}&#10;    &lt;/span&gt;&#10;  );&#10;};&#10;&#10;const Button = ({ children, variant = &quot;default&quot;, className, ...props }: React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt; &amp; { variant?: &quot;default&quot; | &quot;outline&quot; }) =&gt; {&#10;  const variants = {&#10;    default: &quot;bg-primary text-primary-foreground hover:bg-primary/90&quot;,&#10;    outline: &quot;border border-border bg-background hover:bg-muted text-foreground&quot;&#10;  };&#10;&#10;  return (&#10;    &lt;button&#10;      className={cn(&quot;inline-flex items-center justify-center px-4 py-2 rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50&quot;, variants[variant], className)}&#10;      {...props}&#10;    &gt;&#10;      {children}&#10;    &lt;/button&gt;&#10;  );&#10;};&#10;&#10;// --- COMPONENTE PRINCIPAL ---&#10;export default function App() {&#10;  const [selectedIds, setSelectedIds] = useState&lt;Set&lt;number&gt;&gt;(new Set());&#10;  const [ingresso, setIngresso] = useState&lt;string&gt;('2023-09');&#10;  const [isMounted, setIsMounted] = useState(false);&#10;&#10;  // Lógica de localStorage e handlers&#10;  useEffect(() =&gt; {&#10;    const savedIds = localStorage.getItem('disciplinasConcluidas');&#10;    const savedIngresso = localStorage.getItem('dataIngresso');&#10;    if (savedIds) setSelectedIds(new Set(JSON.parse(savedIds)));&#10;    if (savedIngresso) setIngresso(savedIngresso);&#10;    setIsMounted(true);&#10;  }, []);&#10;&#10;  useEffect(() =&gt; {&#10;    if (isMounted) {&#10;      localStorage.setItem('disciplinasConcluidas', JSON.stringify(Array.from(selectedIds)));&#10;      localStorage.setItem('dataIngresso', ingresso);&#10;    }&#10;  }, [selectedIds, ingresso, isMounted]);&#10;&#10;  const handleToggleDisciplina = (id: number) =&gt; {&#10;    setSelectedIds(prev =&gt; {&#10;      const newIds = new Set(prev);&#10;      newIds.has(id) ? newIds.delete(id) : newIds.add(id);&#10;      return newIds;&#10;    });&#10;  };&#10;&#10;  // CORRIGIDO: Forçar recálculo sempre que ingresso ou selectedIds mudarem&#10;  const resultados = useMemo(() =&gt; {&#10;    if (!isMounted) return null;&#10;    // Garantir que sempre recalcula quando a data de ingresso muda&#10;    return calcularResultados(selectedIds, ingresso);&#10;  }, [selectedIds, ingresso, isMounted]);&#10;&#10;  const disciplinasPorSemestre = useMemo(() =&gt; {&#10;    return MATRIZ_CURRICULAR.reduce((acc, d) =&gt; {&#10;      (acc[d.semestre_ideal] = acc[d.semestre_ideal] || []).push(d);&#10;      return acc;&#10;    }, {} as Record&lt;number, Disciplina[]&gt;);&#10;  }, []);&#10;&#10;  const getStatusIcon = (disciplina: Disciplina) =&gt; {&#10;    const isConcluida = selectedIds.has(disciplina.id);&#10;    return isConcluida ? (&#10;      &lt;CheckCircle className=&quot;h-4 w-4 text-primary&quot; /&gt;&#10;    ) : (&#10;      &lt;AlertCircle className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;    );&#10;  };&#10;&#10;  const getCategoryClass = (categoria: Disciplina['categoria']) =&gt; {&#10;    switch (categoria) {&#10;      case 'Obrigatória': return 'category-obrigatoria';&#10;      case 'Optativa': return 'category-optativa';&#10;      case 'Prática Profissional': return 'category-pratica';&#10;      case 'TCC': return 'category-tcc';&#10;      default: return 'category-obrigatoria';&#10;    }&#10;  };&#10;&#10;  if (!isMounted) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-background flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;          &lt;GraduationCap className=&quot;h-12 w-12 text-primary mx-auto animate-spin&quot; /&gt;&#10;          &lt;p className=&quot;text-lg text-muted-foreground&quot;&gt;Carregando aplicação...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background p-6&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;mb-8 text-center animate-fade-in-up&quot;&gt;&#10;        &lt;h1 className=&quot;text-4xl font-bold text-foreground mb-2 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent&quot;&gt;&#10;          Progresso Acadêmico&#10;        &lt;/h1&gt;&#10;        &lt;p className=&quot;text-muted-foreground&quot;&gt;Acompanhe seu desenvolvimento no curso de Ciência da Computação - IFBA&lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Grid com três seções */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-3 gap-6&quot;&gt;&#10;        {/* Seção 1: Matriz Curricular */}&#10;        &lt;Card className=&quot;lg:col-span-1 floating-card animate-fade-in-up&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;div className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;&#10;              Seu Mês e Ano de Ingresso:&#10;              &lt;input&#10;                type=&quot;month&quot;&#10;                value={ingresso}&#10;                onChange={(e) =&gt; setIngresso(e.target.value)}&#10;                className=&quot;ml-2 px-2 py-1 border border-border rounded text-foreground bg-input text-sm focus:ring-2 focus:ring-primary focus:border-transparent&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;BookOpen className=&quot;h-5 w-5 text-primary&quot; /&gt;&#10;              Matriz Curricular&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-4 max-h-96 overflow-y-auto&quot;&gt;&#10;            {Object.entries(disciplinasPorSemestre).map(([semestre, disciplinas]) =&gt; (&#10;              &lt;div key={semestre} className=&quot;semester-card animate-delay-1&quot;&gt;&#10;                &lt;h4 className=&quot;font-semibold text-sm text-foreground mb-3 flex items-center gap-2&quot;&gt;&#10;                  &lt;span className=&quot;bg-primary text-primary-foreground w-6 h-6 rounded-full flex items-center justify-center text-xs&quot;&gt;&#10;                    {semestre}&#10;                  &lt;/span&gt;&#10;                  {semestre}º Semestre&#10;                &lt;/h4&gt;&#10;                &lt;div className=&quot;space-y-2&quot;&gt;&#10;                  {disciplinas.map(d =&gt; (&#10;                    &lt;div key={d.id} className=&quot;discipline-item&quot;&gt;&#10;                      &lt;input&#10;                        type=&quot;checkbox&quot;&#10;                        id={`d-${d.id}`}&#10;                        checked={selectedIds.has(d.id)}&#10;                        onChange={() =&gt; handleToggleDisciplina(d.id)}&#10;                        className=&quot;discipline-checkbox&quot;&#10;                      /&gt;&#10;                      &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2 mb-1&quot;&gt;&#10;                          {getStatusIcon(d)}&#10;                          &lt;label htmlFor={`d-${d.id}`} className=&quot;font-medium text-sm text-card-foreground cursor-pointer truncate&quot;&gt;&#10;                            {d.codigo} - {d.nome}&#10;                          &lt;/label&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2 text-xs&quot;&gt;&#10;                          &lt;span className={cn(&quot;category-badge&quot;, getCategoryClass(d.categoria))}&gt;&#10;                            {d.categoria}&#10;                          &lt;/span&gt;&#10;                          &lt;span className=&quot;workload-info&quot;&gt;{d.carga_horaria}h&lt;/span&gt;&#10;                          {d.prerequisitos.length &gt; 0 &amp;&amp; (&#10;                            &lt;span className=&quot;text-muted-foreground truncate&quot;&gt;&#10;                              Pré-req: {d.prerequisitos.join(', ')}&#10;                            &lt;/span&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Seção 2: Projeção de Formatura */}&#10;        &lt;Card className=&quot;lg:col-span-1 floating-card animate-fade-in-up animate-delay-1&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Calendar className=&quot;h-5 w-5 text-primary&quot; /&gt;&#10;              Projeção de Formatura&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;            {resultados &amp;&amp; (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;projection-card text-center space-y-2&quot;&gt;&#10;                  &lt;div className=&quot;text-3xl font-bold text-primary&quot;&gt;{resultados.projecao.semestre}&lt;/div&gt;&#10;                  &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;Semestre previsto para formatura&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;{resultados.projecao.data}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;space-y-4&quot;&gt;&#10;                  &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;span className=&quot;text-sm&quot;&gt;Disciplinas Concluídas&lt;/span&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                      {MATRIZ_CURRICULAR.length - resultados.disciplinasPendentes.length}/{MATRIZ_CURRICULAR.length}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;span className=&quot;text-sm&quot;&gt;Disciplinas Restantes&lt;/span&gt;&#10;                    &lt;span className=&quot;font-medium text-primary&quot;&gt;&#10;                      {resultados.disciplinasPendentes.length}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;                    &lt;span className=&quot;text-sm&quot;&gt;Data de Ingresso&lt;/span&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;&#10;                      {new Date(ingresso + '-01').toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' })}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;bg-muted rounded-lg p-4&quot;&gt;&#10;                  &lt;h4 className=&quot;font-medium mb-2 text-sm text-foreground&quot;&gt;Próximas Disciplinas&lt;/h4&gt;&#10;                  &lt;ul className=&quot;space-y-1 text-sm text-muted-foreground&quot;&gt;&#10;                    {resultados.disciplinasPendentes.slice(0, 3).map(d =&gt; (&#10;                      &lt;li key={d.id} className=&quot;flex items-center gap-2&quot;&gt;&#10;                        &lt;Clock className=&quot;h-3 w-3&quot; /&gt;&#10;                        {d.nome}&#10;                      &lt;/li&gt;&#10;                    ))}&#10;                    {resultados.disciplinasPendentes.length &gt; 3 &amp;&amp; (&#10;                      &lt;li className=&quot;text-xs text-muted-foreground&quot;&gt;&#10;                        +{resultados.disciplinasPendentes.length - 3} disciplinas restantes&#10;                      &lt;/li&gt;&#10;                    )}&#10;                  &lt;/ul&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Seção 3: Percentual de Progresso */}&#10;        &lt;Card className=&quot;lg:col-span-1 floating-card animate-fade-in-up animate-delay-2&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;TrendingUp className=&quot;h-5 w-5 text-primary&quot; /&gt;&#10;              Percentual de Progresso&#10;            &lt;/CardTitle&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;            {resultados &amp;&amp; (&#10;              &lt;&gt;&#10;                &lt;div className=&quot;flex items-center justify-center&quot;&gt;&#10;                  &lt;div className=&quot;progress-circle&quot;&gt;&#10;                    &lt;svg viewBox=&quot;0 0 100 100&quot;&gt;&#10;                      &lt;circle&#10;                        cx=&quot;50&quot;&#10;                        cy=&quot;50&quot;&#10;                        r=&quot;40&quot;&#10;                        strokeWidth=&quot;8&quot;&#10;                        fill=&quot;transparent&quot;&#10;                        className=&quot;bg-circle stroke-[8]&quot;&#10;                      /&gt;&#10;                      &lt;circle&#10;                        cx=&quot;50&quot;&#10;                        cy=&quot;50&quot;&#10;                        r=&quot;40&quot;&#10;                        strokeWidth=&quot;8&quot;&#10;                        fill=&quot;transparent&quot;&#10;                        strokeDasharray={`${resultados.percentualGeral * 2.51} 251`}&#10;                        className=&quot;progress-fill stroke-[8]&quot;&#10;                        strokeLinecap=&quot;round&quot;&#10;                      /&gt;&#10;                    &lt;/svg&gt;&#10;                    &lt;div className=&quot;absolute inset-0 flex items-center justify-center&quot;&gt;&#10;                      &lt;div className=&quot;text-center&quot;&gt;&#10;                        &lt;div className=&quot;text-3xl font-bold text-primary&quot;&gt;{resultados.percentualGeral.toFixed(1)}%&lt;/div&gt;&#10;                        &lt;div className=&quot;text-xs text-muted-foreground&quot;&gt;Completo&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;space-y-3&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center justify-between text-sm&quot;&gt;&#10;                    &lt;span&gt;Progresso Geral&lt;/span&gt;&#10;                    &lt;span className=&quot;font-medium&quot;&gt;{resultados.percentualGeral.toFixed(1)}%&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;Progress value={resultados.percentualGeral} className=&quot;h-3&quot; /&gt;&#10;&#10;                  &lt;div className=&quot;space-y-4&quot;&gt;&#10;                    &lt;h4 className=&quot;font-medium text-sm&quot;&gt;Requisitos de Conclusão&lt;/h4&gt;&#10;                    {Object.entries(resultados.progressoPorCategoria).map(([nome, dados]) =&gt; (&#10;                      &lt;div key={nome} className=&quot;space-y-2&quot;&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center text-xs&quot;&gt;&#10;                          &lt;span className=&quot;text-muted-foreground&quot;&gt;{nome}&lt;/span&gt;&#10;                          &lt;span className=&quot;font-medium&quot;&gt;{dados.cumprida}/{dados.prevista}h&lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;Progress value={(dados.cumprida / dados.prevista) * 100} className=&quot;h-1&quot; /&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center text-xs&quot;&gt;&#10;                          &lt;Badge variant={dados.pendente &lt;= 0 ? &quot;default&quot; : &quot;outline&quot;}&gt;&#10;                            {dados.pendente &lt;= 0 ? 'Cumprido' : `${dados.pendente}h restantes`}&#10;                          &lt;/Badge&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>